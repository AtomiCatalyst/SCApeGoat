Metric Solver API
=================
This API can be used to compute various different metrics relating to side-channel analysis. These
metrics will aid with assessing a systems security and identifying areas of interest in large trace sets.
Each metric is a standalone function and requires minimal setup to utilize.

.. py:function:: signal_to_noise_ratio(labels)

    Computes the signal-to-noise ratio of a trace set and associated labels. High magnitudes of the resulting SNR traces
    indicate cryptographic leakage at that sample.

   :param labels: A Python dictionary where the keys are labels and the values are the associated power traces. The value of
                    labels[L] is a list of power traces, list[trace_0, trace_1, ..., trace_N], associated with label L.
                    For example, the label can be the output of the AES Sbox such that L = Sbox[key ^ text].
   :type labels: dict

   :return: The SNR of the provided trace set
   :rtype: np.ndarray
   :raises TypeError: if any value in labels.items() is not a np.ndarray or list type

   :Authors: Samuel Karkache (swkarkache@wpi.edu), Trey Marcantonio (tmmarcantonio@wpi.edu)

.. py:function:: t_test(fixed_t, random_t)

    Computes the t-statistic and t-max between fixed and random trace sets. T-statistic magnitudes above or below
    \|th\| = 4.5 indicate cryptographic vulnerabilities.

    :param random_t: The random trace set
    :type random_t: np.ndarray | list
    :param fixed_t: The fixed trace set
    :type fixed_t: np.ndarray | list
    :return: The t-statistic at each time sample and t-max at each trace as a tuple of numpy arrays
    :rtype: (np.ndarray, np.ndarray)
    :raises ValueError: if fixed_t and random_t do not have the same length
    :Authors: Dev Mehta (dmmehta2@wpi.edu), Samuel Karkache (swkarkache@wpi.edu)

.. py:function:: pearson_correlation(predicted_leakage, observed_leakage)

    Computes the correlation between observed power traces and predicted power leakage corresponding to a
    key guess. The correlation when the predicted power leakage is modeled using the correct key guess has
    a relatively high magnitude.

    :param predicted_leakage: predicted power consumption generated by a leakage model
    :type predicted_leakage: np.ndarray | list
    :param observed_leakage: actual power traces collected from the cryptographic target
    :type observed_leakage: np.ndarray | list
    :return: The correlation trace corresponding to the predicted leakage
    :rtype: np.ndarray
    :raises ValueError: if the predicted power leakage and the observed power leakage do not have the same length
    :Authors: Samuel Karkache (swkarkache@wpi.edu)


.. py:function:: score_and_rank(key_candidates, partitions, traces, score_fcn, *args)

    Scores and ranks a set of key candidates based on how likely they are to be the actual key.

    :param key_candidates: List of key possible key candidates. For a one-byte subkey it would be [0, 1, ..., 255].
    :type key_candidates: np.ndarray | list
    :param target_byte: The byte of the full key that you are targeting. Ignore and set to 0 if your scoring function does not need it.
    :type target_byte: int
    :param traces: The set of power traces that will be used for scoring
    :type traces: numpy.ndarray | list
    :param score_fcn: Callback to the scoring function used to score each key candidate. The score with correlation scoring
                    function is pre-defined and can be used. NOTE: User defined scoring functions must be in the form
                    score_fcn(traces, key_guess, target_byte, ...) to work with this metric. Your scoring function does not
                    need to use all the required arguments, but they must be present as shown.
    :type score_fcn: Callable
    :param args: Additional arguments for the scoring function supplied in score_fcn. For example, the predefined score with
                    correlation function requires plaintexts and a leakage model callback as additional arguments.
    :type args: Any
    :return: An numpy array of sorted tuples containing the key candidates and corresponding scores. For example, assuming that
                    numpy array `ranks` was returned from the metric, ranks[0][0] is the highest ranked key candidate and
                    ranks[0][1] is the score of the highest ranked key candidate.
    :rtype: numpy.ndarray
    :Authors: Samuel Karkache (swkarkache@wpi.edu)


.. py:function:: score_with_correlation(traces, key_guess, target_byte, plaintexts, leakage_model)

    Scoring function that assigns a key guess a score based on the max value of the pearson correlation.

    :param traces: The collected power traces
    :type traces: list | np.ndarray
    :param key_guess: The key guess
    :type key_guess: any
    :param target_byte: The target byte of the key
    :type target_byte: int
    :param plaintexts: The plaintexts used during trace capture
    :type plaintexts: list | np.ndarray
    :param leakage_model: The leakage model function. The hamming weight and hamming distance leakage model function are
                        pre-defined in this library.
    :type leakage_model: Callable
    :return: The score of the key guess
    :rtype: Number
    :Authors: Samuel Karkache (swkarkache@wpi.edu)


.. py:function:: success_rate_guessing_entropy(correct_keys, experiment_ranks, order, num_experiments)

